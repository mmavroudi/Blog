# Generated by Django 4.1.1 on 2023-01-06 09:50

from django.db import migrations, models
import django.db.models.deletion
import taggit.managers


class Migration(migrations.Migration):

    dependencies = [
        ('taggit', '0005_auto_20220424_2025'),
        ('projects', '0009_alter_post_slug'),
    ]

    operations = [
        migrations.CreateModel(
            name='Artist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('description', models.TextField()),
                ('image', models.ImageField(upload_to='uploads')),
                ('slug', models.SlugField(unique=True)),
            ],
        ),
        migrations.AddField(
            model_name='post',
            name='tags',
            field=taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.CreateModel(
            name='Record',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=60)),
                ('description', models.TextField()),
                ('release_date', models.DateField()),
                ('size', models.IntegerField()),
                ('image', models.ImageField(upload_to='uploads')),
                ('price', models.IntegerField()),
                ('slug', models.SlugField(unique=True)),
                ('type_album', models.CharField(choices=[('VINYL', 'Vinyl'), ('DIGITAL', 'Digital')], default='VINYL', max_length=7)),
                ('stock', models.CharField(choices=[('INSTOCK', 'In Stock'), ('OUTOFSTOCK', 'Out of Stock')], default='OUTOFSTOCK', max_length=10)),
                ('artist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projects.artist')),
                ('categories', models.ManyToManyField(to='projects.category')),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'ordering': ['title'],
            },
        ),
    ]
